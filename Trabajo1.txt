----------------------------PUNTO 1---------------------------------------------------------------
CREATE OR REPLACE PROCEDURE punto1(var_n NUMBER) IS
    CURSOR tabla IS SELECT DISTINCT codpv, codproducto FROM venta ORDER BY codpv,codproducto; 
    original VARCHAR2(200):=''; 
    aux VARCHAR2(200):='';
    aux2 VARCHAR2(200):='';
    numeros VARCHAR2(200):='';
    numeros1 VARCHAR2(200):='';
    ene NUMBER(2); 
BEGIN 
    FOR datos IN (SELECT * FROM proveedor ORDER BY codpv) LOOP 
        aux:= (datos.codpv || ' ('||datos.nompv||')'); 
        original:= (datos.codpv || ' ('||datos.nompv||')');
        ene:=1; 
        FOR datos2 IN tabla LOOP
            IF datos.codpv=datos2.codpv THEN
                numeros:=(numeros||datos2.codproducto||',');
            END IF;
        END LOOP;
        numeros:= ('{'||SUBSTR(numeros,0,LENGTH(numeros)-1)||'}');
        FOR datos3 IN (SELECT * FROM proveedor ORDER BY codpv) LOOP 
            IF ene<var_n THEN
                IF datos3.codpv>datos.codpv THEN 
                    aux2:= (datos3.codpv || ' ('||datos3.nompv||')');
                    FOR datos4 IN tabla LOOP 
                        IF datos3.codpv=datos4.codpv THEN
                        numeros1:=(numeros1||datos4.codproducto||',');
                        END IF;
                    END LOOP;
                    numeros1:= ('{'||SUBSTR(numeros1,0,LENGTH(numeros1)-1)||'}');
                END IF; 
                IF numeros1=numeros THEN
                    aux:=(aux||','||aux2);
                    ene:=ene+1; 
                END IF;
                aux2:='';
                numeros1:=''; 
                IF ene=var_n THEN
                    DBMS_OUTPUT.PUT_LINE('['||aux||']'||' --> '||numeros);
                    ene:=1; 
                    aux:=original;
                END IF;
            END IF;
        END LOOP;
        aux:='';
        numeros:='';
    END LOOP;
END;
----------------------------PUNTO 2--------------------------------------------------------------

CREATE TABLE sucursal(
cods VARCHAR2(500) PRIMARY KEY,
nrosucdependientes NUMBER(1) NOT NULL CHECK (nrosucdependientes BETWEEN 0 AND 9)
);

CREATE OR REPLACE TRIGGER ingresar_deps
FOR INSERT ON sucursal
COMPOUND TRIGGER
     nro_dependientes sucursal.nrosucdependientes%TYPE := :NEW.nrosucdependientes;
     TYPE sucursal_type IS TABLE OF sucursal%ROWTYPE INDEX BY BINARY_INTEGER;
     sucursal_temp sucursal_type;
     i NUMBER;
     
     AFTER EACH ROW IS
     BEGIN
       IF nro_dependientes > 0 THEN 
        FOR i IN 1..nro_dependientes LOOP
         sucursal_temp(i).cods := :NEW.cods ||'.'||i;
         sucursal_temp(i).nrosucdependientes := 0;
        END LOOP;
       END IF;
     END AFTER EACH ROW;
   
     --Executed after DML statement
     AFTER STATEMENT IS
     BEGIN
       i := sucursal_temp.FIRST;
       WHILE i IS NOT NULL LOOP
         INSERT INTO sucursal VALUES sucursal_temp(i);
         i := sucursal_temp.NEXT(i);
       END LOOP;
     END AFTER STATEMENT;

END ingresar_deps;
/

-----------------------------------------------------------

CREATE OR REPLACE TRIGGER actualizar_deps
FOR UPDATE OF nrosucdependientes ON sucursal
COMPOUND TRIGGER
   TYPE sucursal_type IS TABLE OF sucursal%ROWTYPE INDEX BY BINARY_INTEGER;
   sucursal_temp sucursal_type;
   i NUMBER;
   j NUMBER;
   k NUMBER;
   dependientes_mayor BOOLEAN :=False;
        
     AFTER EACH ROW IS
     BEGIN
       IF :NEW.nrosucdependientes > :OLD.nrosucdependientes THEN
       dependientes_mayor := True;
        FOR i IN (:OLD.nrosucdependientes + 1)..:NEW.nrosucdependientes LOOP
         sucursal_temp(i).cods := :NEW.cods || '.' || i;
         sucursal_temp(i).nrosucdependientes := 0;
        END LOOP;
       ELSIF :NEW.nrosucdependientes < :OLD.nrosucdependientes THEN
        dependientes_mayor := False;
        j := 0;
        FOR i IN (:NEW.nrosucdependientes + 1)..:OLD.nrosucdependientes LOOP
         sucursal_temp(j).cods := :NEW.cods || '.' || i;
         sucursal_temp(j).nrosucdependientes := 0;
         j := sucursal_temp.LAST + 1;
         
        END LOOP;
       END IF;
       
     END AFTER EACH ROW;
   
     AFTER STATEMENT IS
     BEGIN
       i := sucursal_temp.FIRST;
       IF dependientes_mayor THEN
        WHILE i IS NOT NULL LOOP
         INSERT INTO sucursal VALUES sucursal_temp(i);
         i := sucursal_temp.NEXT(i);
        END LOOP;
       ELSE
        WHILE i IS NOT NULL LOOP
         SELECT nrosucdependientes INTO j 
         FROM sucursal WHERE sucursal.cods = sucursal_temp(i).cods;
         IF j > 0 THEN
          FOR k IN 1..j LOOP
           sucursal_temp(sucursal_temp.LAST +1).cods := sucursal_temp(i).cods || '.' || k;
          END LOOP;
         END IF;
         DELETE FROM sucursal WHERE sucursal.cods = sucursal_temp(i).cods;
         i := sucursal_temp.NEXT(i);
        END LOOP;
       END IF;
        
     END AFTER STATEMENT;

END actualizar_deps;
/
